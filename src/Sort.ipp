/**Сортировка пузырьком. 
    * Сортировка пузырьком — один из самых известных алгоритмов сортировки. 
    * Последовательное сравнивание соседних элементов с последующим изменением 
    * чисел местами, если предыдущее оказывается больше последующего.Таким образом 
    * элементы с большими значениями оказываются в конце списка,
    * а с меньшими остаются в начале. Является учебным, и не применяется на практике. 
    *
    * @param array Сортируемый массив типа std::vector<T>.
*/
template <typename T>
void Sort<T>::Bubble(std::vector<T>& array)
{
    if (array.size() < 2)
    {
        return;
    } 

    for (int i = 0; i + 1 < array.size(); ++i)
    {
       for (int j = 0; j + 1 < array.size() - i; ++j)
       {
            if (array[j + 1] < array[j])
            {
                std::swap(array[j], array[j + 1]);
            }            
       }
    }
}

/**Шейкерная сортировка
    * Шейкерная сортировка является вариацией сортировки пузырьком.
    * Этот алгоритм сортировки напоминает пузырьковую сортировку, 
    * но помимо движения больших значений в конец массива и меньших значений в начало,
    * он выполняет движение в обоих направлениях. Чередование движения вперед и назад
    * позволяет ускорить сортировку за счет уменьшения количества итераций на каждом проходе. 
    *
    * @param array Сортируемый массив типа std::vector<T>.
*/
template <typename T>
void Sort<T>::Shaker(std::vector<T>& array)
{
    if (array.size() < 2)
    {
        return;
    } 

    int left = 0;
    int right = array.size() - 1;

    while(left <= right)
    {
        for (int i = right; i > left; --i)
        {
            if (array[i - 1] > array[i])
            {
                std::swap(array[i - 1], array[i]);
            }
        }
    }
    ++left;
    
    for (int i = 0; i < right; ++i)
    {
        if (array[i] > values[i + 1])
        {
            std::swap(array[i], array[i + 1])
        }
    }
    --right;
}

/** Сортировка расческой
    * Сортировка расческой — улучшенная версия сортировки пузырьком. 
    * Её идея состоит в том, чтобы «устранить» элементы с небольшими значениями в конце массива,
    * что может существенно замедлить работу алгоритма сортировки пузырьком. В отличие от пузырьковой 
    * сортировки, при сортировке расчёской сначала берётся достаточно большое расстояние 
    * между сравниваемыми значениями, а потом оно сужается по мере продвижения 
    * по массиву до минимального значения.
    * 
    * @param array Сортируемый массив типа std::vector<T>.
*/
template <typename T>
void Sort<T>::Comb(std::vector<T>& array)
{
    if (array.size() < 2)
    {
        return;
    }

    const double factor = 1.247; //оптимальный фактор уменьшения
    double step = array.size() - 1;

    while (step >= 1)
    {
        for (int i = 0; i + step < array.size(); i++)
        {
            if (array[i] > array[i + step])
            {
                std::swap(array[i], array[i + step]);
            }
        }
        step /= factor;
    }

    //Выполннение Bubble sort для "причесанного" массива 
    for (int i = 0; i + 1 < array.size(); ++i)
    {
        for (int j = 0; j + 1 < array.size() - i; ++j)
        {
            if (array[j + 1] < array[j])
            {
                std::swap(array[j], array[j + 1])
            }
        }
    }
}